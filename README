****************************************************************************
* README.stage  - Richard Vaughan - Stage-1.5       
*                                                                          
* $Id: README,v 1.9 2004-06-18 06:59:59 rtv Exp $    
****************************************************************************

** Release notes **

 You should read these notes carefully before running Stage. This is
the first release after a substantial rewrite: plenty has changed
under the hood, but more important for most people is that the way
Stage is configured, launched and used has changed significantly.

Help is available in several places:

+ Here. Please read this document..
+ The Player/Stage web pages at http://playerstage.sourceforge.net
  - from the web site you can access manuals, FAQ and mailing lists


Summary of new features:

+ Dynamic creation, deletion and modification of worlds, robots,
and environmental features.

+ Robot geometry: robot bodies are composed from line segments, so you
can build a robot any shape and size either by desribing the lines
yourself, or by loading an image file using the provided
bitmap-to-line-segment filter. 

+ Bitmap formats: The shape of any object, including backgrounds, can
be loaded from bitmap files in any format understood my gdkpixmap
(PNG,JPG,PPM,etc.). Example bitmaps are provided in PNG format. The
days of the fussy old PNM parser are gone.

+ World size: worlds can now be very large indeed
(UNSIGNED_LONG_MAX**2 pixels). For most purposes this is effectively
infinite. You no longer need to specify a world size in the world
file. A sparse array (hash table) is used to represent the world, so
worlds use memory proportional to the amount of stuff in 'em,
independent of their dimensions.

+ A single instance of Stage can provide multiple concurrent
simulation sessions. Stage is now a server that provides simulation
services, when requested by a client. The stage1p5 driver in Player is
a client to the Stage server. Other clients are possible; in fact
Player does not provide access to all of Stage's features (the Player
protocol doesn't currently contain any simulation control spec, though
this might be added in time), so you may want to write clients that
talk directly to Stage. Of course, Player is still the first choice of
target for your robot controller.


Summary of new internal stuff, not apparent to the user:

+ Timing and synchronization with Player works properly.

+ Stage is now written entirely in C and makes extensive use of GLib
data structures.

+ Multi-resolution ray-tracing: the cost of using a memory-friendly
hash table for the underlying world representation (matrix) is a much
greater time-cost in checking and setting matrix cells. This made
ray-tracing very slow. To compensate, I implemented multi-resolution
ray tracing, reducing the number of matrix lookups by a factor of a
few hundred in typical use. The result is faster ray-tracing
performance overall compared to previous versions. The moral of this
story is to pay attention in your CS classes and optimize algorithms
and data structures, not code!


** README ***

This README provides a quick-start guide to building and running
Stage.  Consult the Stage User Manual for full details.

-- What is Stage? ---------------------------------------------------------

Stage simulates mobile robots and sensors in a two-dimensional
bitmapped environment containing a variety of objects. Stage is
designed to work well with Player. Player provides a powerful,
flexible interface to a variety of robot hardware; Stage provides
virtual devices for Player. Various sensor models are provided,
including sonar, scanning laser rangefinder, color blob tracking from
a pan-tilt-zoom camera and odometry. Several controllers designed in
Stage have been demonstrated to work on real robots.

Stage is developed by the Player/Stage Project (P/S), an international
consortium of robotics researchers. P/S is lead by Brian Gerkey
(Stanford University), Richard Vaughan (Simon Fraser University) and
Andrew Howard (University of Southern California).

-- How to get Stage -----------------------------------------------------

The primary source for Player and Stage is:

http://playerstage.sourceforge.net

-- Ownership ------------------------------------------------------------

Stage is released under the GNU General Public License.

Stage programs, images, examples, source code and documentation are
copyright (c) the authors.

These fine people worked on Stage:

Richard Vaughan
Andrew Howard
Brian Gerkey
Kasper Stoy
Boyoon Jung
Jakob Fredslund

Stage's development has been supported at the University of Southern
California and HRL Laboratories LLC by DARPA IPTO, and at Simon Fraser
University by an NSERC Discovery Grant.

-- Whats here? ------------------------------------------------------------

stage    - the simulation engine.
       
Some example environments and setup files are provided, along with a
manual and this bootstrap documentation

-- Requirements ------------------------------------------------------------ 

Developed and tested under Linux kernel 2.4, glibc-2 and OS X 1.3.
Written in reasonable ANSII/POSIX so should compile elsewhere. No
promises, but people have found it to work on a variety of set-ups.

Requires: 

+ Player & RTK [http://playerstage.sourceforge.net]
+ GTK [http://www.gtk.org]
+ X11R6 [http://www.x.org]

-- Mac OS X ----------------------------------------------------------------

NOTES

Requirements
install fink
sudo apt-get install gtk2 atk1 libjpeg-bin
export PKG_CONFIG_PATH=<prefix>/lib/pkgconfig

-- Compiling ---------------------------------------------------------------

** TODO - WARNING - THIS SECTION IS OUT OF DATE **


We use the standard GNU build system: download; extract; configure;
make install. 

0) Obtain and install these packages, on which Stage depends:

- librtk-1.1 (available from http://playerstage.sourceforge.net)
- player-1.3 (available from http://playerstage.sourceforge.net)

Note that these packages will have their own dependencies, s

1) unpack the Stage tarball with

$ tar xzvf stage-<version>.tgz

The tar on some systems (such as OS X) does not support the '-z'
option, so you have to gunzip first, then 'tar xvf stage-<version>.tar'

2) configure stage:

Stage needs to know the path to your Player installation or build
directory, and to librtk and your X11 color database if you want to
use the GUI. We use the GNU autoconf system to handle these
configurations, plus various optional components and cross-platform
compatibility issues. If you installed Player and librtk in their
default locations (/usr/local), and you want a normal installation,
the defaults should work:

$ cd stage-<version>
$ ./configure

To see all the available configuration options do:

$ configure --help

3) compile stage:

$ make

will build the binary src/stage.

Optionally, as root you can do:
 
$ make install

to install the executables in /usr/local/bin/

You can specify a different installation directory using:

$ configure --prefix=<install dir>

Which is useful if you don't have root access to your machine. If you
change the prefix, remember to set the correct path to Player and
librtk.

-- Running ---------------------------------------------------------------

To run stage, first make sure the Player executable can be found in
your path.

The syntax for running Stage is generally:

 stage [options] <worldfile>

e.g. from the top build directory, you can try

$ src/stage worlds/everything.world

The .world file specifies what stage must simulate. The command-line
options are described in the manual, and can be listed by doing:

$ stage --help

-- Configuration file ----------------------------------------------------

The user defines a world to simulate in Stage's configuration
(*.world) file. The world file format is documented in the manual, but
you can get the idea from looking at the examples.

--------------------------------------------------------------------------

Enjoy, and let us know what you do with Stage.

 - Richard Vaughan, Andrew Howard, Brian Gerkey






