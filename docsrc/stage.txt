/* Stage plugin documentation file - parsed by Doxygen for the user
 * manual 
 * $Id: stage.txt,v 1.20 2008-02-24 23:24:40 rtv Exp $
*/


/**
\mainpage The Stage Robot Simulator

<p>Copyright Richard Vaughan and contributors 1998-2008.
<p>Part of the Player Project [http://playerstage.sourceforge.net]

\section License

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2 as
published by the Free Software Foundation.
 
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

A copy of the license is included with the sourcecode in the file
'COPYING". Copying and redistribution is permitted only under the
terms of the license.

\section Introduction

Stage is a robot simulator. It provides a virtual world populated by
mobile robots and sensors, along with various objects for the robots
to sense and manipulate.

There are three ways to use Stage: 

<ol> 
<li> The "stage" program: a standalone robot simulation program
that loads your robot control program from a library that you provide.

<li> The Stage plugin for Player (libstageplugin) - provides a
population of virtual robots for the popular Player networked robot
interface system.

<li> Write your own simulator: the "libstage" C++ library makes it
easy to create, run and customize a Stage simulation from inside your
own programs.
</ol>

\section Models

<p>Stage provides several sensor and actuator models, including sonar
or infrared rangers, scanning laser rangefinder, color-blob tracking,
fiducial tracking, bumpers, grippers and mobile robot bases with
odometric or global localization.

\section Design

<p>Stage was designed with multi-agent systems in mind, so it provides
fairly simple, computationally cheap models of lots of devices rather
than attempting to emulate any device with great fidelity. This design
is intended to be useful compromise between conventional high-fidelity
robot simulations, the minimal simulations described by Jakobi [4], and
the grid-world simulations common in artificial life research [5]. We
intend Stage to be just realistic enough to enable users to move
controllers between Stage robots and real robots, while still being
fast enough to simulate large populations. We also intend Stage to be
comprehensible to undergraduate students, yet sophisticated enough for
professional reseachers.
  
<p>Player also contains several useful 'virtual devices'; including
some sensor pre-processing or sensor-integration algorithms that help
you to rapidly build powerful robot controllers. These are easy to use
with Stage.

[@ref refs]


\section Authors

Stage was written by:

<ul>
<li>Richard Vaughan <tt>(vaughan@sfu.ca)</tt>
<li>Brian Gerkey <tt>(gerkey@sri.com)</tt>
<li>Reed Hedges <tt>(hedges@mobilerobots.com)</tt>
<li>Andrew Howard  <tt>(ahoward@robotics.usc.edu)</tt>
<li>Pooya Karimian <tt>(pooyak@sfu.ca)</tt>
</ul>

Many patches and bug reports have been contributed by users around the
world.

Stage is part of the <a
href="http://playerstage.sourceforge.net">Player Project</a>, a
community effort to develop Free Software tools for robotics
research. Stage is free to use, modify and redistribute under the
terms of the <a href=http://www.gnu.org/licenses/licenses.html> GNU
General Public License</a>.

\section Citations

If you use Stage in your work, we'd appreciate a citation. At the time of writing, the most suitable reference is:

<ul>
<li>
Brian Gerkey, Richard T. Vaughan and Andrew Howard. "The
Player/Stage Project: Tools for Multi-Robot and Distributed Sensor
Systems"
Proceedings of the 11th International Conference on Advanced Robotics,
pages 317-323,
Coimbra, Portugal, June 2003 <A HREF="http://www.isr.uc.pt/icar03/">(ICAR'03)</A>.
<br>
<A HREF="http://robotics.stanford.edu/~gerkey/research/final_papers/icar03-player.ps.gz">[gzipped
postscript]</A> <A HREF="http://robotics.stanford.edu/~gerkey/research/final_papers/icar03-player.pdf">[pdf]</A>  
</ul>

<p>Please help us keep track of what's being used out there by
correctly naming the Player/Stage components you use. Player used on
its own is called "Player". Player and Stage
used together are referred to as "the Player/Stage system" or just
"Player/Stage". When libstage is used without Player, it's just called
"Stage". When Player is used with its 3D ODE-based simulation backend,
Gazebo, it's called Player/Gazebo. Gazebo without Player is just
"Gazebo". All this software is part of the "Player Project".

\section Support

<p> Funding for Stage has been provided in part by:

<ul>
 <li>DARPA (USA)
 <li>NASA (USA)
 <li>NSERC (Canada)
 <li>NSF (USA)
 <li>Simon Fraser University (Canada)
</ul>

\section Names

The names "Player" and "Stage" were inspired by the lines:

@verbatim
 "All the world's a stage"
 "And all the men and women merely players"
@endverbatim

<p>from <i>"As You Like It"</i> by William Shakespeare.


\page release Release Notes

\section v300 Version 3.0.0

TODO

Richard Vaughan (rtv) vaughan@sfu.ca 

\section v201 Version 2.0.1

This is mainly a bugfix and performance-enhancement release. This
release requires Player-2.0.1, released simultaneously.

The only major new feature is the addition of support for Player's
speech interface: speech bubbles show the text being "spoken" by each
robot. The text is rendered using Pango, so non-Roman alphabets are
supported.

Richard Vaughan (rtv) vaughan@sfu.ca 2006.3.24


\section v2 Version 2.0.0

This is a major new release of Stage, and is intended to replace all
previous versions. It requires Player-2.0.0 or later.

Please report bugs to the tracker and let us know what you do with Stage.

Richard Vaughan (rtv) vaughan@sfu.ca 2006.2.26

\subsection features New Features

Significant user-level changes include:

 - <b>Stage</b> is now implemented as the C library
 <b>libstage</b>. Using libstage, your programs can include a
 sophisticated robot simulator with a few lines of code. The
 <b>Player</b> plugin <b>libstageplugin</b> is a wrapper for libstage
 that provides simulation services to Player. Player with
 libstageplugin is the <b>Player/Stage</b>
 system.

 - Player clients can draw directly in the Stage window using the
   graphics2d interface. libstage programs can use the internal
   user graphics API.

 - Configurable odometry error in position model

 - Gripper model that can pick up anything. Any object can be made
   grippable/pushable by setting the the gripper_return property.
 
 - Pan-tilt-zoom (PTZ) model.

 - More and improved visualizations, including models leaving trails
   over time

 - Any object can now have its shape specified by a bitmap file (JPG,
   PNG, etc.).

 - Worldfile syntax has changed slightly, so you may need to edit your existing
worlds to get them to work. Look at the example worlds in <tt>(stage
src)/worlds</tt> to get the idea.

 - Worlds can be very large (thousands of meters square).

\page help Getting Help

If you're having problems and you can't find what you need in this manual, there are several places to find help. 

First, please check the <a
href=http://playerstage.sourceforge.net/doc/doc.html>online
documentation page</a> to make sure you have the latest
documentation. In particular, check the <a
href=http://playerstage.sourceforge.net/doc/stage_user/faq.html>latest
online latest FAQ page</a>.

Next, you should search <a
href=http://sourceforge.net/mailarchive/forum.php?forum_id=8201>the
playerstage_users mailing list archive</a> to
see if your questions have already been answered.

Next, you should probably spend a few minutes with <a
href=http://www.google.com>Google</a>. This often works well, as it
picks up P/S conversations from all over the place.

If you still need help, you can send email to the mailing list
playerstage_users@lists.sourceforge.net and a user or developer may
reply to you. <b>Remember that these mails go to hundreds of people</b>, so
please be polite and give as much information as you can in your
email.


\page install Installation

<b>Important: If you plan to use Stage with Player, Player must be
properly installed before you install Stage.</b>

<h2>Quick start</h2>

Install Player first, then Stage, using the standard GNU autotools
build system: download and extract the tarballs, then <tt>./configure
; make install</tt>.

<h2>Standard install procedure</h2>

<p>To install Stage in the default location, follow these steps:

<ol>

<li>If you plan to use Player with Stage, make sure Player is
 installed and working. See the Player documentation for instructions.

<li>Download the latest Stage source tarball (stage-src-\<version\>.tgz)
from <a href=http:playerstage.sf.net>http://playerstage.sf.net</a>

<li>Uncompress and expand the tarball: <br>
    <tt>$ tar xzvf stage-\<version\>.tgz</tt>

<li>`cd' into Stage's source directory:<br>
     <tt>$ cd stage-\<version\></tt>
 
<li>To configure Stage with default settings:<br>
<tt>$ ./configure</tt><br>

<li>Compile Stage:<br>
<tt>$ make</tt>

<li>Test to see if Stage works by running the stest program:<br>
<tt>src/stest worlds/simple.world robot1</tt><br>
If you see a robot running around, your build was successful. If not,
you need to debug. See the <a href="http://playerstage.sf.net">website
and user groups for debugging help</a>.

<li>Install Stage. By default, Stage will be installed in
<tt>/usr/local</tt> so you need to become root for this step. Remember
to return to your normal user ID afterwards. <br> 
<tt>$ make install</tt>

</ol>


<h2>Player/Stage</h2>

Stage can provide a population of simulated devices for the Player
robot server. Player client programs can use the virtual Stage devices
as if they were real Player robots. To do this, Stage provides the
dynamically-loadable Player plugin driver "libstageplugin". Player
using libstageplugin is known as "the Player/Stage system", or
"Player/Stage", and often abbreviated to "P/S".

To use Player/Stage, you run the "player" program with appropriate
configuration files.  See the documentation [@ref player] for details
and examples.

<h2>Stage program</h2>

Stage also provides the executable program "stage", which allows you
to run Stage simulations without Player. There are pros and cons of
using Player, so be sure to read the documentation [@ref stage] and
[@ref player] to determine what's best for your project.

<h2>libstage C++ library</h2>

You can also create your own custom robot simulations independently of
Player by using the libstage C++ library directly in your code. See
the documentation [@ref libstage] for details.

<h2>Customized installations</h2>

<p>Stage follows the standard GNU autotools conventions for build and
install options. To see a list of all the available configuration
options, do this:

<p><tt>./configure --help</tt>

<p>The most important option is <tt>--prefix</tt>, used
to change the installation directory from the default (which varies
from system to system, but is usually <tt>/usr/local</tt>). In
general, Stage should get the same prefix you used to install Player. Prefixes must be absolute paths, i.e. a complete path starting with a '/'.

<p>For example, you might want to install Stage your home directory
because you don't have root access:

<p><tt>$./configure --prefix=/home/harrison/PS</tt>

<p><b>These instructions assume that Player was configured with the
same prefix.</b> The command line to do this is probably the same, but you
should check the Player instructions just in case.

\section References

[1] Brian Gerkey, Richard Vaughan, Kasper Stoy, Andrew Howard, Gaurav
Sukhatme, Maja Mataric (2001) "Most Valuable Player: A Robot Device
Server for Distributed Control", Proc. IEEE Int. Conf. Intelligent
Robotic Systems, Maui, Hawaii. (IROS'01)

[2] Richard Vaughan, Brian Gerkey, Andrew Howard (2003) "On device
abstractions for portable, resuable robot code", IEEE/RSJ
International Conference on Intelligent Robot Systems, Las Vegas,
Nevada, USA.  (IROS2003)

[3] Brian Gerkey, Richard Vaughan, Andrew Howard (2003) "The
Player/Stage Project: Tools for Multi-Robot and Distributed Sensor
Systems", 11th International Conference on Advanced Robotics, Coimbra,
Portugal (ICAR'03).

[4] Nick Jakobi (1997) "Evolutionary Robotics and the Radical Envelope
of Noise Hypothesis", Adaptive Behavior Volume 6, Issue 2. pp.325 -
368 .

[5] Stuart Wilson (1985) "Knowledge Growth in an Artificial Animal",
Proceedings of the First International Conference on Genetic Agorithms
and Their Applications.  Hillsdale, New Jersey. pp.16-23.

*/


/* Stage plugin documentation file - parsed by Doxygen for the user
 * manual 
 * $Id: stage.txt,v 1.20 2008-02-24 23:24:40 rtv Exp $
*/

/**
@mainpage The Stage Robot Simulator

<p>Copyright Richard Vaughan and contributors 1998-2005.
<p>Part of the Player/Stage Project [http://playerstage.sourceforge.net]

\section License

<p>Stage sourcecode and documentation is released under the terms of
the GNU General Public License v2. A copy of the license is included
with the sourcecode in the file 'COPYING". Copying and redistribution
is permitted only under the terms of the license.

<hr>
<small>
Richard Vaughan <tt>(vaughan@sfu.ca)</tt> \$Id: stage.txt,v 1.20 2008-02-24 23:24:40 rtv Exp $
</small>
*/


/** 
@ingroup stage
@defgroup help Getting Help

If you're having problems and you can't find what you need in this manual, there are several places to find help. 

First, please check the <a
href=http://playerstage.sourceforge.net/doc/doc.html>online
documentation page</a> to make sure you have the latest
documentation. In particular, check the <a
href=http://playerstage.sourceforge.net/doc/stage_user/faq.html>latest
online latest FAQ page</a>.

Next, you should search <a
href=http://sourceforge.net/mailarchive/forum.php?forum_id=8201>the
playerstage_users mailing list archive</a> to
see if your questions have already been answered.

Next, you should probably spend a few minutes with <a
href=http://www.google.com>Google</a>. This often works well, as it
picks up P/S conversations from all over the place.

If you still need help, you can send email to the mailing list
playerstage_users@lists.sourceforge.net and a user or developer may
reply to you. <b>Remember that these mails go to hundreds of people</b>, so
please be polite and give as much information as you can in your
email.

*/


/**
@ingroup stage
@defgroup refs References

[1] Brian Gerkey, Richard Vaughan, Kasper Stoy, Andrew Howard, Gaurav
Sukhatme, Maja Mataric (2001) "Most Valuable Player: A Robot Device
Server for Distributed Control", Proc. IEEE Int. Conf. Intelligent
Robotic Systems, Maui, Hawaii. (IROS'01)

[2] Richard Vaughan, Brian Gerkey, Andrew Howard (2003) "On device
abstractions for portable, resuable robot code", IEEE/RSJ
International Conference on Intelligent Robot Systems, Las Vegas,
Nevada, USA.  (IROS2003)

[3] Brian Gerkey, Richard Vaughan, Andrew Howard (2003) "The
Player/Stage Project: Tools for Multi-Robot and Distributed Sensor
Systems", 11th International Conference on Advanced Robotics, Coimbra,
Portugal (ICAR'03).

[4] Nick Jakobi (1997) "Evolutionary Robotics and the Radical Envelope
of Noise Hypothesis", Adaptive Behavior Volume 6, Issue 2. pp.325 -
368 .

[5] Stuart Wilson (1985) "Knowledge Growth in an Artificial Animal",
Proceedings of the First International Conference on Genetic Agorithms
and Their Applications.  Hillsdale, New Jersey. pp.16-23.

*/

/**
@ingroup stage
@defgroup install Installation

<b>Important: Stage is an extension to Player; Player must be properly
installed before you can install Stage.</b>

<h2>Quick start</h2>

Install Player first, then Stage, using the standard GNU autotools
build system: download and extract the tarballs, then <tt>./configure
; make install</tt>.

<h2>Standard install procedure</h2>

<p>To install Stage in the default location, follow these steps:

<ol>

<li>Make sure Player is installed and working. See the Player
 documentation for instructions.

<li>Download the latest Stage source tarball (stage-src-\<version\>.tgz)
from <a href=http:playerstage.sf.net>http://playerstage.sf.net</a>

<li>Uncompress and expand the tarball: <br>
    <tt>$ tar xzvf stage-\<version\>.tgz</tt>

<li>`cd' into Stage's source directory:<br>
     <tt>$ cd stage-\<version\></tt>
 
<li>To configure Stage with default settings:<br>
<tt>$ ./configure</tt><br>

<li>Compile Stage:<br>
<tt>$ make</tt>

<li>Install Stage. By default, Stage will be installed in
<tt>/usr/local</tt> so you need to become root for this step. Remember
to return to your normal user ID afterwards. <br> 
<tt>$ make install</tt>

</ol>

<h2>Customized installations</h2>

<p>Stage follows the standard GNU autotools conventions for build and
install options. To see a list of all the available configuration
options, do this:

<p><tt>./configure --help</tt>

<p>The most important option is <tt>--prefix</tt>, used
to change the installation directory from the default (which varies
from system to system, but is usually <tt>/usr/local</tt>). In
general, Stage should get the same prefix you used to install Player. Prefixes must be absolute paths, i.e. a complete path starting with a '/'.

<p>For example, you might want to install Stage your home directory
because you don't have root access:

<p><tt>$./configure --prefix=/home/harrison/PS</tt>

<p><b>Remember: these instructions assume that Player was configured with the
same prefix.</b> The command line to do this is probably the same, but you
should check the Player instructions just in case.

*/


/**
@page release Release Notes

<h2>Version 1.6.1</h2>

This is a bug-fix release that replaces 1.6.0. 

- Fixes several GUI bugs, including the [View/Fill Polygons] menu item.

- Some code clean-up and thread-safety fixes

<h2>Version 1.6.0</h2>

This release of Stage is the first after a major rewrite. There are
bound to be bugs and teething troubles, but the <a
href=http://www.cs.sfu.ca/research/groups/autonomy>Autonomy Lab</a>
has been using this code for serious work for a few months now and we
think it's useful and usable.

<h3>Significant changes visible to the user</h3>

<ol>

<li>Stage is now a Player plugin, instead of an executable. The key
benefit of this is that <b>all Player drivers are now available for
use directly with Stage</b>, including sophisticated drivers like
AMCL, without needing passthrough drivers.

<li>Stage depends on Player 1.6 or newer.

<li>Worldfile syntax has a changed, so you need to edit your existing
worlds to get them to work. Look at the example worlds in <tt>(stage
src)/worlds</tt> to get the idea.

<li>Any object can now have its shape specified by a bitmap file

<li>Several bitmap file formats are supported, using a third-party
library. Load maps and robot bodies from JPG, PNG, etc. No more PNM
troubles.

<li>Worlds can now be very large (thousands of meters square).

<li>Several models are missing from this release - notably the gripper
and puck. These will be available soon. Meanwhile, enjoy the full
power of Player with the basic laser, sonar, position, fiducial and
blobfinder models.

<li>Stage no longer depends on libRTK.

<li>Some models from previous versions may not yet be available in
this release (e.g. gripper & puck), but we're working on them. Let us
know which ones you need.

</ol>

<h3>Significant changes under the hood</h3>

<ol>

<li>The Stage simulation engine is now a library rather than an
application. The library can be used to write custom robot
simulations. This is very useful if you need to do synchronous control
of robots (e.g for perfectly repeatable experiments), or dynamically
create and destroy robots or other objects. You can't (yet) do this
though Player. Refer to the <a
href=http://playerstage.sf.net/doc/stage_reference>libstage reference
manual</a> for the API and developer docs.</a>.

<li>Stage is now mostly written in C. A simple object-oriented system
allows one level of inheritance for writing polymorphic model code.

<li>The underlying occupancy grid model has changed from a simple
fixed-size array to a sparse array of (almost) unlimited size
(implemented with a hash table). To compensate for the performance hit
of raytracing in the hash table, a three-level multiple-resolution
approach is used. Raytracing is now usually <i>much</i> faster than in
Stage-1.3. To get an idea how this works, select the
View/Debug/Raytrace menu item while a laser or ranger is producing
data.

<li>Most home-rolled data structures have been replaced by glib
versions.

</ol>

*/



