/* Stage plugin documentation file - parsed by Doxygen for the user
 * manual 
 * $Id: stage.txt,v 1.2 2004-10-19 07:11:35 rtv Exp $
*/

/**
@mainpage Stage (libstageplugin)

Stage is a robot simulator that works with the Player robot server. It
provides a virtual world populated by mobile robots and sensors, along
with various objects for the robots to sense and manipulate. 

<h2>Design</h2>

<p>Stage robots and sensors work like any other Player device: users
write robot controllers and sensor algorithms as `clients' to the
Player `server'. Typically, clients cannot tell the difference between
the real robot devices and their simulated Stage equivalents (unless
they try very hard). We have found that robot controllers developed as
Player clients controlling Stage robots will work with little or no
modification with the real robots and vice versa[1]. With a little care,
the same binary program can often control Stage or real robots without
even being recompiled[2]. Thus the Player/Stage system allows rapid
prototyping of controllers destined for real robots. Stage can also be
very useful by simulating populations of realistic robot devices you
don't happen to own[3].

<p>Stage was designed with multi-agent systems in mind, so it provides
fairly simple, computationally cheap models of lots of devices rather
than attempting to emulate any device with great fidelity. This design
is intended to be useful compromise between conventional high-fidelity
robot simulations, the minimal simulations described by Jakobi[4], and
the grid-world simulations common in artificial life research[5]. We
intend Stage to be just realistic enough to enable users to move
controllers between Stage robots and real robots, while still being
fast enough to simulate large populations. We also intend Stage to be
comprehensible to undergraduate students, yet sophisticated enough for
professional reseachers.

  
<p>Player also contains several useful 'virtual devices'; including some
sensor pre-processing or sensor-integration algorithms. These were
tricky to use with previous versions of Stage, but this release makes
it simple to take full advantage of Player.

<h2>Models</h2>

<p>Stage provides several sensor and actuator models, including sonar or
infrared rangers, scanning laser rangefinder, color-blob tracking,
fiducial tracking and mobile robot bases with odometry. 

<i>Note:
Some models from previous versions may not yet be available in this
release, but we're working on them. Let us know which ones you need.
</i>

<hr> <small> 
<p><b>References</b>

[1] Brian Gerkey, Richard Vaughan, Kasper Stoy, Andrew Howard, Gaurav
Sukhatme, Maja Mataric (2001) "Most Valuable Player: A Robot Device
Server for Distributed Control", Proc. IEEE Int. Conf. Intelligent
Robotic Systems, Maui, Hawaii. (IROS'01)

[2] Richard Vaughan, Brian Gerkey, Andrew Howard. (2003) "On device
abstractions for portable, resuable robot code", IEEE/RSJ
International Conference on Intelligent Robot Systems, Las
Vegas, Nevada, USA.  (IROS2003)

[3] Brian Gerkey, Richard Vaughan, Andrew
Howard. (2003) "The Player/Stage Project: Tools for Multi-Robot and Distributed
Sensor Systems",  11th International Conference on Advanced
Robotics, Coimbra, Portugal (ICAR'03).

[4] Nick Jakobi "Evolutionary Robotics and the Radical Envelope of
Noise Hypothesis", Adaptive Behavior XX XX 

[5] Stuart Wilson "Knowledge Growth in an Artificial Animal", XX XXX XX

<hr>
Richard Vaughan <tt>(vaughan@sfu.ca)</tt> \$Id: stage.txt,v 1.2 2004-10-19 07:11:35 rtv Exp $

</small>

*/

/**
@page install Installation

Installing Stage....

*/

/** 
@page devices Devices

Devices..

*/

/** 
@page dev_simulation Simulation Device

The simulation device...

*/

/** 
@page models Models

Introduction to models...

*/
