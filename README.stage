****************************************************************************
* README.stage  - Richard Vaughan - Stage-1.0a       
*                                                                          
* $Id: README.stage,v 1.6 2001-08-17 03:13:19 vaughan Exp $    
****************************************************************************

** THIS VERSION REQUIRES >= Player-1.0a but I recommend you always
use the most up-to-date Player unless its distribution warns you of
Stage interface problems.

throughout the text <version> refers to the current Stage (see top of file)

-- What is Stage? ---------------------------------------------------------

Stage simulates mobile robots moving in and sensing a two-dimensional
bitmapped environment containing a variety of objects. Robots are
controlled through Player. Player provides a powerful, flexible
interface to ActivMedia Pioneer 2; Stage provides virtual devices for
Player. Various sensor models are provided, including sonar, scanning
laser rangefinder, color blob tracking from a pan-tilt-zoom camera and
odometry. Several controllers designed in Stage have been demonstrated
to work on real robots.

It was designed at the USC Robotics Research Labs to support research
into multi-agent intelligent autonomous systems.

-- How to get Stage -----------------------------------------------------

The primary source for Player and Stage is:

http://robotics.usc.edu/player

-- Ownership ------------------------------------------------------------

Stage is released under the GNU Public License.

Stage programs, images, examples, source code and
documentation are copyright (c) University of Southern California 1998-2001. 

These fine people worked on Stage:

Richard Vaughan
Andrew Howard
Brian Gerkey
Kasper Stoy
Boyoon Jung
Jakob Fredslund

Stage's development is supported at the University of Southern
California by DARPA's TMR & MARS programs, and by an NSF grant.

-- Whats here? ------------------------------------------------------------

stage    - the simulation engine.
xs       - an X GUI for Stage
rtkstage - a version of Stage with a built-in GUI based on the RTK library
truthlog - a utility for logging the positions of all Stage's objects	

Some example environments and setup files are provided, along with
this (admittedly minimal) documentation.

-- Requirements ------------------------------------------------------------ 

Developed and tested under Linux kernel 2.4.2, glibc-2.2.2. 
Written in reasonable ANSII/POSIX so should compile elsewhere.

Requires: Player [http://robotics.usc.edu/player/]
          TCP/IP, POSIX threads, X11R6 (optional)

-- Compiling ---------------------------------------------------------------

0) Obtain and install Player (http://fnord.usc.edu/player)

1) unpack the tarball with

$ tar xzvf Stage-<version>.tgz

2) Check that the top-level Makefile (Stage-<version>/Makefile) has a
valid path the your Player source e.g. PLAYERSRC = /usr/local/player/ so
that Stage can find Player's offsets.h file.

3) compile stage:

$ cd Stage-<version>
$ make clean
$ make 

will make the executable bin/stage

optionally, as root you can do:
 
$ make install

this will install the executable as /usr/local/stage/bin/stage

-- Running ---------------------------------------------------------------

To run stage, first make sure the Player executable can be found in
your path, ie. doing

$ which Player

returns a valid Player executable path, such as

/usr/local/player/bin/Player

If not, set your PATH variable to include the Player binary directory. 
eg. in BASH do:

$ export PATH=$PATH:/usr/local/player/bin

To run stage itself do:

$ stage <filename.world>

The .world file specifies what stage must simulate - look at the tag
names in any of the example *.world files to get the idea. 

-- Configuration file ----------------------------------------------------

The user defines a world to simulate in Stage's configuration
(*.world) file. Look at the README.world file.

-- Controlling the robots ----------------------------------------------

The virtual robots in Stage are controlled through the Player interface
package developed by Brian Gerkey, Kasper Stoy and Richard Vaughan at USC.
Demo controllers in various languages (currently C, TCL & Java) are included
in the Player distribution which can be found at:

http://fnord.usc.edu/player/

Try using the Player example client <Player_dir>/examples/tcl/viewer.tk
to check that you can control Stage robots and read from their
sensors. Viewer.tk is a very useful tool for testing and debugging
your controller code.

-- Position logging ----------------------------------------------------

Stage provides a TCP server that reports any changes in the location
of any device. It is straightforward to use in your own applications;
look at the example client `truthlog'. Or just use truthlog as it is.

Compile it in the src directory with:

$ make truthlog

Run Stage, then run truthlog and you should see the time, ID (in hex)
positions (x,y,theta), etc., of each device printed on the standard
output. They are updated whenever they change in Stage. Look at the
code to see how it works.  I usually pipe the standard output to a
file to log the robot's positions during an experiment. eg:

$ truthlog > experiment1.log

--- Names ---------------------------------------------------------------

 All the world's a stage,
 And all the men and women merely players;
 (As You Like It)

 "Life's but a walking shadow, a poor player,
 That struts and frets his hour upon the stage
 And then is heard no more. It is a tale	
 Told by an idiot, full of sound and fury,
 Signifying nothing." (Macbeth)

-- Known bugs, symptoms & fixes ---------------------------------------------

none - mail bug reports (include Stage's output messages) to 
vaughan@robotics.usc.edu.

-- To do --------------------------------------------------------------------

Plenty:
- authentication
- gripper break beams
- replace image layer system (in progress)
- ray trace speed enhacements

-----------------------------------------------------------------------------
RTV






