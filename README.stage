****************************************************************************
* README.stage  - Richard Vaughan - Stage-1.0       
*                                                                          
* $Id: README.stage,v 1.7 2001-10-13 02:01:41 vaughan Exp $    
****************************************************************************

** THIS VERSION REQUIRES >= Player-1.0 but I recommend you always
use the most up-to-date Player unless its distribution warns you of
Stage interface problems.

throughout the text <version> refers to the current Stage (see top of file)

-- What is Stage? ---------------------------------------------------------

Stage simulates mobile robots and sensors in a two-dimensional
bitmapped environment containing a variety of objects. Robots are
controlled through Player. Player provides a powerful, flexible
interface to ActivMedia Pioneer 2; Stage provides virtual devices for
Player. Various sensor models are provided, including sonar, scanning
laser rangefinder, color blob tracking from a pan-tilt-zoom camera and
odometry. Several controllers designed in Stage have been demonstrated
to work on real robots.

It was designed at the USC Robotics Research Labs to support research
into multi-agent intelligent autonomous systems.

-- How to get Stage -----------------------------------------------------

The primary source for Player and Stage is:

http://robotics.usc.edu/player

-- Ownership ------------------------------------------------------------

Stage is released under the GNU Public License.

Stage programs, images, examples, source code and documentation are
copyright (c) University of Southern California 1998-2001.

These fine people worked on Stage:

Richard Vaughan
Andrew Howard
Brian Gerkey
Kasper Stoy
Boyoon Jung
Jakob Fredslund

Stage's development is supported at the University of Southern
California by DARPA's TMR & MARS programs, and by an NSF grant.
Richard Vaughan now works for HRL Laboratories, Malibu, CA.

-- Whats here? ------------------------------------------------------------

stage    - the simulation engine.
xs       - an X GUI for Stage
rtkstage - a version of Stage with a built-in GUI based on the RTK library
manager  - a program for synchronizing several Stages distributed across
           multiple hosts. Experimental.
truthlog - a utility for logging the positions of all Stage's objects
	   (currently broken)
       
Some example environments and setup files are provided, along with
this (admittedly minimal) documentation.

-- Requirements ------------------------------------------------------------ 

Developed and tested under Linux kernel 2.4.2, glibc-2.2.2.  Written
in reasonable ANSII/POSIX so should compile elsewhere. No promises,
but people have found it to work on a variety of set-ups.

Requires: Player [http://robotics.usc.edu/player/]
          TCP/IP, POSIX threads, X11R6

-- Compiling ---------------------------------------------------------------

0) Obtain and install Player (http://robotics.usc.edu/player)

1) unpack the Stage tarball with

$ tar xzvf Stage-<version>.tgz

2) Check the top-level makefile (stage/Makefile.common). You must set
the path to your Player source directory. Other settings, such as
installation directory and the location of X11's color database can
also be made here. If you have trouble compiling, you should first
check these settings.

3) compile stage:

$ cd stage
$ make 

will make the executables stage, xs, rtkstage, truthlogger and
manager, and copy them to stage/bin. Alternatively you can compile
each binary separately with `make <binary name>', which will leave the
target in the stage/src directory.

Optionally, as root you can do:
 
$ make install

this will install the executables in /usr/local/stage/bin/stage
(unless you otherwise configured the installation target in
Makefile.common)

-- Running ---------------------------------------------------------------

To run stage, first make sure the Player executable can be found in
your path, ie. doing

$ which player

returns a valid Player executable path, such as

/usr/local/player/bin/player

If not, set your PATH variable to include the Player binary directory. 
eg. in BASH do:

$ export PATH=$PATH:/usr/local/player/bin

To run stage itself do:

$ stage [options] <filename.world>

The .world file specifies what stage must simulate. The command-line
options are described below. If all is well, Stage will start up, load
the world file, spawn an instance each of XS and Player. Each step
causes a message on standard output, so a typical invocation and start
up would look like this:

$ cd stage/examples
$ ../bin/stage simple.world 
 
** Stage v1.0 ** [World simple.world][./simple.pnm]        
** XS v0.4 ** [Env 6602][Truth 6601]
** Player v1.0 **

Stage also outputs a status line on stdout at every cycle.  At this
point you should be able to interact with objects in the world through
XS and access sensors and actuators through Player. If it didn't work,
the first things to check are the settings in Makefile.common and your
Player build.

-- Configuration file ----------------------------------------------------

The user defines a world to simulate in Stage's configuration
(*.world) file. Look at the README.world file.  There are several
examples in the stage/examples directory. Look at the tag names in any
of the example *.world files to get the idea.

-- RTKStage --------------------------------------------------------------

RTKStage (stage/bin/rtkstage) is a version of Stage compiled with a
built-in X11 GUI using Andrew Howard's RTK toolkit. The RTK source is
provided in the distribution (stage/rtk). This GUI provides some
powerful features not found in XS. RTKStage is not yet documented, but
it is mostly self-explanatory.

-- Command-line options --------------------------------------------------

Stage takes the following command-line options. Where an option can
also be set in the configuration file, the command line option takes
precedence.

-l <logfile> 

Enables logging of device positions into the named file. This is
useful for gathering experimental results, etc. The log file has a
header that records information about the run.

-xs

Prevents Stage spawing an instance of the XS GUI. RTKStage has this
option enabled by default.

+xs 

Spawn an instance of XS.

-u <update period in seconds> 

Stage will attempt to take this much real time (wall-clock time) to
perform each update cycle. It does this by computing the cycle, then
sleeping (or polling for input) for any remaining time. If the cycle's
computation takes longer than the requested cycle time, Stage will run
slower than requested. Default is 0.1 seconds.

-v <simulation time step in seconds>

Stage will simulate the passing of this much time per update
cycle. Default is 0.1 seconds. By changing the ratio of real (-u) and
simulated (-v) time, you can make Stage run faster than, slower than,
or approximately at real-time. 

-fast

Runs Stage as fast as possible. Stage will not attempt to match real
time. Useful for batch runs and in sync mode (see below). This is
slightly more efficient than setting the desired update time to zero
seconds (-u 0.0).

-tp <port num>

Set the port number for the "truth server" used by external clients
such as XS and truthlogger. Default is 6602.

-ep <port num>

Set the port number for the "enviornment server" used by external
clients such as XS. Default is 6601.

-s

Enable synchronized mode. If this option is given, Stage will wait
between update cycles for an external sync message. The Stage Manager
(bin/manager) tool uses this mode to connect and sychronize several
copies of Stage distributed over multiple hosts. 

-- Controlling the robots ----------------------------------------------

The virtual robots in Stage are controlled through the Player
interface package also developed at USC.  Demo controllers in various
languages (currently C++, C, TCL & LISP) are included in the Player
distribution which can be found at:

http://robotics.usc.edu/player

Try using the Player example client <Player_dir>/examples/tcl/viewer.tk
to check that you can control Stage robots and read from their
sensors. Viewer.tk is a very useful tool for testing and debugging
your controller code.

Client libraries in other languages including Java and Python are also
available. Check the website for the latest resources.

-- Position logging ----------------------------------------------------

THIS UTILITY IS CURRENTLY BROKEN

Stage provides a TCP server that reports any changes in the location
of any device. It is straightforward to use in your own applications;
look at the example client `truthlog'. Or just use truthlog as it is.

Compile it in the src directory with:

$ make truthlog

Run Stage, then run truthlog and you should see the positions
(x,y,theta), etc., of each device printed on the standard output,
along with the current simulation time. They are updated whenever they
change in Stage. Look at the code to see how it works.  I usually pipe
the standard output to a file to log the robot's positions during an
experiment. eg:

$ truthlog > experiment1.log

--- Names ---------------------------------------------------------------

 All the world's a stage,
 And all the men and women merely players;
 (As You Like It)

 "Life's but a walking shadow, a poor player,
 That struts and frets his hour upon the stage
 And then is heard no more. It is a tale	
 Told by an idiot, full of sound and fury,
 Signifying nothing." (Macbeth)

-- Known bugs, symptoms & fixes ---------------------------------------------

none - mail bug reports (include Stage's output messages) to 
vaughan@robotics.usc.edu.

-- To do --------------------------------------------------------------------

- fix truthlog
- ray trace speed enhancements
- new un*x-style device model (in progress).
- manual

-----------------------------------------------------------------------------
RTV






